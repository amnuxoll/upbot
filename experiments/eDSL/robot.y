/**
 * robot.y
 *
 * The grammar definition for the UPBOT DSL.
 *
 * @author Fernando Freire
 * @since 04 Aug 2013
 *
 */
%{

#include <stdio.h>
#include <string.h>

%}

/**
 * UNION
 *
 * This union definition allows us to extend the YYLVAL variable that gets
 * thrown around between FLEX and BISON.
 */
%union {
    int ival;   // Integer value that is received from INT_MOD
    char *bval; // String value that is received from BUMP_MOD
    char *dval; // String value that is received from DRIVE_MOD
}

/**
 * TOKENS
 *
 * These are the supported tokens that FLEX is currently catching. In the case
 * of the first three tokens, we are actually capturing input, so we need to
 * specify their type before proceeding.
 *
 */
%token <ival> INT_MOD
%token <bval> BUMP_MOD
%token <dval> DRIVE_MOD

%token STATE_O STATE_C PAREN_O PAREN_C
%token LABEL NOOP BUMP STOP TIME WHEEL
%token CLIFF VWALL TURN SONG DRIVE BLINK
%token STOP_MOD TURN_MOD
%token PAIRED_WITH YIELDS EOL

/* better error messages */
%error-verbose

/* Where should we start parsing? */
%start state

%%

state : STATE_O LABEL EOL statement_list STATE_C EOL;

statement_list
        : statement EOL
        | statement_list statement EOL
        ;

statement : event_list PAIRED_WITH responder_list YIELDS LABEL;

event_list
        : event
        | PAREN_O event PAREN_C
        | PAREN_O event_list event PAREN_C
        ;

responder_list
        : responder
        | PAREN_O responder PAREN_C
        | PAREN_O responder_list responder PAREN_C
        ;

event
        : BUMP BUMP_MOD
        | TIME INT_MOD
        | NOOP
        ;

responder
        : DRIVE DRIVE_MOD
        | TURN TURN_MOD
        | STOP STOP_MOD
        ;

%%

/**
 * main()
 *
 * Responsible for running the yyparse function, which will apply the above
 * grammar definition to the tokenized input returned from FLEX.
 *
 * @param[in] argc The number of arguments passed to main.
 * @param[in] argv An array of arguments passed to main.
 *
 */
int main(int argc, char** argv) {
    yyparse();
}

/**
 * yyerror()
 *
 * This function is called if yyparse encounters an error during the parsing of
 * the input file.
 *
 * @param[in] s The error string generated by BISON.
 *
 */
yyerror(char *s) {
  fprintf(stderr, "error: %s\n", s);
}
